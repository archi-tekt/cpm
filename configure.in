# -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_MSG_NOTICE([general setup])
AC_PREREQ(2.59)
AC_INIT(cpm, 0.23beta, harry_b@mm.st)
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADER([config.h])

# Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

# Check --with-XXX configuration
AC_ARG_WITH(ncurses,
    [  --with-ncurses=PATH     path to the ncurses installation],
    [
      CFLAGS="$CFLAGS -I${withval}/include"
      CPPFLAGS="$CPPFLAGS -I${withval}/include"
      LDFLAGS="$LDFLAGS -L${withval}/lib"
      if test -n "${need_dash_r}"; then
        LDFLAGS="$LDFLAGS -R${withval}/lib"
      fi
    ]
  )
AC_ARG_WITH(cdk,
    [  --with-cdk=PATH         path to the cdk installation],
    [
      CFLAGS="$CFLAGS -I${withval}/include -I${withval}/include/cdk"
      CPPFLAGS="$CPPFLAGS -I${withval}/include -I${withval}/include/cdk"
      LDFLAGS="$LDFLAGS -L${withval}/lib"
      if test -n "${need_dash_r}"; then
        LDFLAGS="$LDFLAGS -R${withval}/lib"
      fi
    ]
  )
AC_ARG_WITH(cdk-v4,
    [  --with-cdk-v4           Force the usage of CDK version 4 ],
    [
      if test "${withval}" != "no"; then
        CFLAGS="$CFLAGS -DFORCE_CDK_V4"
      fi
    ]
  )
USE_CRACKLIB=1
AC_ARG_WITH(crack-lib,
    [  --with-crack-lib=PATH   path to the libcrack installation],
    [
      if test "${withval}" == "no"; then
        CFLAGS="$CFLAGS -DNO_CRACKLIB"
        USE_CRACKLIB=0
      else
        CFLAGS="$CFLAGS -I${withval}/include"
        CPPFLAGS="$CPPFLAGS -I${withval}/include"
        LDFLAGS="$LDFLAGS -L${withval}/lib"
        if test -n "${need_dash_r}"; then
          LDFLAGS="$LDFLAGS -R${withval}/lib"
        fi
      fi
    ]
  )
AC_ARG_WITH(crack-dict,
    [  --with-crack-dict=FILE  filename of the dictionaries (without extension)],
    [
      if test ! -f "${withval}.hwm"; then
        AC_MSG_ERROR([cracklib dictionary ${withval}.hwm does not exist])
      fi
      if test ! -f "${withval}.pwd"; then
        AC_MSG_ERROR([cracklib dictionary ${withval}.pwd does not exist])
      fi
      if test ! -f "${withval}.pwi"; then
        AC_MSG_ERROR([cracklib dictionary ${withval}.pwi does not exist])
      fi
      CFLAGS="$CFLAGS -DCRACKLIB_DICTPATH='\"${withval}\"'"
    ]
  )
AC_ARG_WITH(dotconf,
    [  --with-dotconf=PATH     path to the dotconf installation],
    [
      CFLAGS="$CFLAGS -I${withval}/include"
      CPPFLAGS="$CPPFLAGS -I${withval}/include"
      LDFLAGS="$LDFLAGS -L${withval}/lib"
      if test -n "${need_dash_r}"; then
        LDFLAGS="$LDFLAGS -R${withval}/lib"
      fi
    ]
  )
AC_ARG_WITH(gpgme,
    [  --with-gpgme=PATH       path to the gpgme installation],
    [
      CFLAGS="$CFLAGS -I${withval}/include"
      CPPFLAGS="$CPPFLAGS -I${withval}/include"
      LDFLAGS="$LDFLAGS -L${withval}/lib"
      if test -n "${need_dash_r}"; then
        LDFLAGS="$LDFLAGS -R${withval}/lib"
      fi
    ]
  )
AC_ARG_WITH(memlock,
    [  --with-memlock=LIMIT    limit for max. memory lock validation
                          WARNING: It is NOT recommended to turn this off! ],
    [
      if test "${withval}" == "no"; then
        CFLAGS="$CFLAGS -DNO_MEMLOCK"
      else
        CFLAGS="$CFLAGS -DMEMLOCK_LIMIT=${withval}"
      fi
    ]
  )
AC_ARG_WITH(xml2,
    [  --with-xml2=PATH        path to the xml2 installation],
    [
      PATH="${withval}/bin:${withval}:${PATH}"
    ]
  )
AC_ARG_WITH(zlib,
    [  --with-zlib=PATH        path to the zlib installation],
    [
      CFLAGS="$CFLAGS -I${withval}/include"
      CPPFLAGS="$CPPFLAGS -I${withval}/include"
      LDFLAGS="$LDFLAGS -L${withval}/lib"
      if test -n "${need_dash_r}"; then
        LDFLAGS="$LDFLAGS -R${withval}/lib"
      fi
    ]
  )

# echo "CFLAGS: $CFLAGS"
# echo "CPPFLAGS: $CPPFLAGS"
# echo "LDFLAGS: $LDFLAGS"

# Checks for libraries.
AC_MSG_NOTICE([checking libraries])
AC_CHECK_LIB(m, main)
if test "${ac_cv_lib_m_main}" != "yes"; then
  AC_MSG_ERROR([can not find the m library.])
fi
AC_CHECK_LIB(ncurses, initscr)
if test "${ac_cv_lib_ncurses_initscr}" != "yes"; then
  AC_MSG_ERROR([can not find the ncurses library.])
fi
AC_CHECK_LIB(cdk, initCDKScreen)
if test "${ac_cv_lib_cdk_initCDKScreen}" != "yes"; then
  AC_MSG_ERROR([can not find the cdk library.])
fi
if test ${USE_CRACKLIB} == 1; then
  AC_CHECK_LIB(crack, FascistCheck)
  if test "${ac_cv_lib_crack_FascistCheck}" != "yes"; then
    AC_MSG_ERROR([can not find the crack library.])
  fi
else
  AC_MSG_NOTICE([skipping cracklib check])
fi
AC_CHECK_LIB(dotconf, dotconf_create)
if test "${ac_cv_lib_dotconf_dotconf_create}" != "yes"; then
  AC_MSG_ERROR([can not find the dotconf library.])
fi
AC_CHECK_LIB(gpgme, gpgme_get_engine_info)
if test "${ac_cv_lib_gpgme_gpgme_get_engine_info}" != "yes"; then
  AC_MSG_ERROR([can not find the gpgme library.])
fi
AC_CHECK_LIB(xml2, xmlParseFile)
if test "${ac_cv_lib_xml2_xmlParseFile}" != "yes"; then
  AC_MSG_ERROR([can not find the xml2 library.])
fi
AC_CHECK_LIB(z, compress)
if test "${ac_cv_lib_z_compress}" != "yes"; then
  AC_MSG_ERROR([can not find the zlib library.])
fi

# ------------------------------------------------------------------------------
# we check if we can use this CDK version
CDK_H=`gcc ${CFLAGS} -M -MG interface_gui.c | perl -e 'while (<>) { $_ =~ s/^.*://; $_ =~ s/^\\s+//; $_ =~ s/\\\\//; $_ =~ s/\\s+$//; @tmp = split(/ /, $_); while (@tmp) { $file = shift(@tmp); if ($file =~ m:/cdk\\.h$:) { print "$file\\n"; } } }' | sort | uniq`
if test "${CDK_H}" == ""; then
  AC_MSG_ERROR([could not locate CDK header file.])
fi
INCOMPATIBLE=`grep "^#define MAX_ITEMS" "${CDK_H}" | grep -c "unused by widgets"`
CDK_UNUSABLE=0
CDK_VERSION_DEF="-DCDK_VERSION_4"
CDK_DEBIAN_DEP="libcdk4 (<= 4.9.10)"
if test ${INCOMPATIBLE} -gt 0; then
  # seems like an incompatible version; we have to check the detailed
  # version to be sure
  CDK_UNUSABLE=1

  # this file only exists in v5
  CDK_VERSION_H=`dirname "${CDK_H}"`"/cdk_version.h"
  if test -f "${CDK_VERSION_H}"; then
    CDK_VERSION=`grep "CDK_VERSION_PATCH" ${CDK_VERSION_H} | cut -d " " -f 3 | sed -e 's/"//g'`
    AC_MSG_NOTICE([CDK version patch: ${CDK_VERSION}])

    # only versions newer than 20060220 can be used since Thomas E. Dickey
    # fixed some bugs I found with the alphalist.
    if test ${CDK_VERSION} -ge 20060220; then
      CDK_UNUSABLE=0
      CDK_VERSION_DEF="-DCDK_VERSION_5"
      CDK_DEBIAN_DEP="libcdk5 (> 5.0.20050424-2)"
    fi
  fi
fi

if test ${CDK_UNUSABLE} -gt 0; then
  AC_MSG_NOTICE([Sorry, this version of CDK can not handle empty lists.])
  AC_MSG_NOTICE([You must downgrade to a version older than cdk-4.9.11-20031210])
  AC_MSG_NOTICE([or newer than cdk-5.0.20060220.])
  AC_MSG_ERROR([Incompatible libcdk version found.])
fi
AC_SUBST(CDK_VERSION_DEF)
AC_SUBST(CDK_DEBIAN_DEP)


# ------------------------------------------------------------------------------
# libxml2 check from http://webcvs.kde.org/cgi-bin/cvsweb.cgi/kdelibs/kdoctools/configure.in.in?rev=1.38&content-type=text/x-cvsweb-markup

AC_PATH_PROG([XML_CONFIG], [xml2-config])
if test -z "$ac_cv_path_XML_CONFIG"; then
  AC_MSG_ERROR([Could not find libxml2 anywhere.])
fi

LIBXML_LIBS="`$XML_CONFIG --libs`"
LIBXML_CFLAGS="`$XML_CONFIG --cflags`"
LIBXML_XMLLINT=`dirname $XML_CONFIG`"/xmllint"
AC_SUBST(LIBXML_LIBS)
AC_SUBST(LIBXML_CFLAGS)
AC_SUBST(LIBXML_XMLLINT)


AC_PATH_PROG([GPGME_CONFIG], [gpgme-config])
if test -z "$ac_cv_path_GPGME_CONFIG"; then
  AC_MSG_ERROR([Could not find gpgme anywhere.])
fi

LIBGPGME_VERSION="`$GPGME_CONFIG --version | cut --delimiter='.' --fields 1,2 | sed -e 's/\\.//g'`"
if test $LIBGPGME_VERSION -lt 10; then
  AC_MSG_ERROR([GPGME must be version 1.0 or higher.])
fi
if test $LIBGPGME_VERSION -lt 11; then
  AC_MSG_NOTICE([GpgME version lower than 1.1 found, recipients can't be detected automatically.])
  WRAPPER_NECESSARY=1
else
  AC_MSG_NOTICE([GpgME version 1.1+ found. Enabling automatic recipient detection.])
  CFLAGS="$CFLAGS -DGPGME_HAS_RECIPIENT"
  WRAPPER_NECESSARY=0
fi
AC_SUBST(WRAPPER_NECESSARY)

LIBGPGME_LIBS="`$GPGME_CONFIG --libs`"
LIBGPGME_CFLAGS="-D_FILE_OFFSET_BITS=64 `$GPGME_CONFIG --cflags`"
AC_SUBST(LIBGPGME_LIBS)
AC_SUBST(LIBGPGME_CFLAGS)

# ------------------------------------------------------------------------------

# Checks for header files.
AC_MSG_NOTICE([checking header files])
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h getopt.h libintl.h locale.h stdlib.h sys/fsuid.h sys/ioctl.h termios.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_MSG_NOTICE([checking typedefs, structures, and compiler characteristics])
AC_CHECK_FUNCS([clearenv environ memset mlockall putenv regcomp setlocale strcasecmp strchr strerror tcgetattr])
AC_C_CONST
AC_C_VOLATILE
AC_FUNC_FSEEKO
AC_FUNC_GETGROUPS
AC_FUNC_MEMCMP
AC_FUNC_STAT
AC_STRUCT_TM
AC_SYS_LARGEFILE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T
AC_TYPE_UID_T

# to compile on AMD64 systems we can't use these checks
# AC_FUNC_MALLOC
# AC_FUNC_REALLOC

AC_MSG_NOTICE([generating files])
AC_CONFIG_FILES([control Makefile tests/decrypt-result.txt tests/encrypt-result.txt])

# Checks for library functions.
AC_OUTPUT

